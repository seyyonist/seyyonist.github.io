{"version":3,"sources":["voucherGenerator.js","App.js","serviceWorker.js","index.js"],"names":["OBJtoXML","obj","rootTag","xml","prop","replace","OBJtoXMLnoRoot","Results","props","id","className","style","display","show","onClick","toggle","value","App","state","csvString","dataList","selectedFile","showResult","this","refs","fileSelector","click","event","self","fileReader","FileReader","filename","target","files","name","readAsText","onload","data","result","trim","setState","content","split","console","debug","Array","isArray","i","length","infor","csvData","date","vtype","refNo","drLed","crLed","drAmt","crAmt","amt","narration","push","alert","csv","entries","forEach","x","y","csvRow","companyId","uuid","uuidv4","cdtrData","REMOVEZEROENTRIES","ISDEEMEDPOSITIVE","LEDGERNAME","AMOUNT","dbtrData","otherDate","VOUCHERTYPENAME","DATE","EFFECTIVEDATE","REFERENCE","NARRATION","GUID","ALTERID","otherDateXml","cdtrDataXml","dbtrDataXml","voucher","generateVoucherXml","Blob","type","filesaver","Date","getTime","current","e","index","rowValue","newDataList","tdata","map","key","onChange","handelvTypeRowChange","handelDrRowChange","handelCrRowChange","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","ref","readInputFile","bind","openFile","processCSV","generateXML","toggleResult","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.691ecd75.chunk.js","sourcesContent":["import { v4 as uuidv4 } from 'uuid';\r\nexport function generateVoucherXml(csvRow, companyId = 123234) {\r\n    /** date:infor[0],\r\n        vtype:infor[1],\r\n        refNo:infor[2],\r\n        drLed:infor[3],\r\n        crLed:infor[4],\r\n        amt:infor[5],\r\n        narration:infor[6]\r\n     */\r\n\r\n    let uuid = uuidv4();\r\n    let cdtrData = {\r\n        REMOVEZEROENTRIES: \"No\",\r\n        ISDEEMEDPOSITIVE: \"No\",\r\n        LEDGERNAME: csvRow.crLed,\r\n        AMOUNT: csvRow.amt\r\n    }\r\n    let dbtrData = {\r\n        REMOVEZEROENTRIES: \"No\",\r\n        ISDEEMEDPOSITIVE: \"Yes\",\r\n        LEDGERNAME: csvRow.drLed,\r\n        AMOUNT: -csvRow.amt\r\n    }\r\n    let otherDate = {\r\n        VOUCHERTYPENAME: csvRow.vtype,\r\n        DATE: csvRow.date,\r\n        EFFECTIVEDATE: csvRow.date,\r\n        REFERENCE: csvRow.refNo,\r\n        NARRATION: csvRow.narration,\r\n        GUID: uuid,\r\n        ALTERID: companyId\r\n    }\r\n    let otherDateXml = OBJtoXMLnoRoot(otherDate)\r\n    let cdtrDataXml = OBJtoXML(cdtrData, \"ALLLEDGERENTRIES.LIST\")\r\n    let dbtrDataXml = OBJtoXML(dbtrData, \"ALLLEDGERENTRIES.LIST\")\r\n    let voucher = '<VOUCHER REMOTEID=\"' + uuid + '\" VCHTYPE=\"' + csvRow.vtype + '\" ACTION=\"Create\">'\r\n    let xml = '<TALLYMESSAGE xmlns:UDF=\"TallyUDF\">' + voucher + otherDateXml + cdtrDataXml + dbtrDataXml + \"</VOUCHER></TALLYMESSAGE>\"\r\n    return xml\r\n}\r\n\r\nfunction OBJtoXML(obj, rootTag) {\r\n    var xml = '<' + rootTag + '>';\r\n    for (var prop in obj) {\r\n        xml += \"<\" + prop + \">\";\r\n        xml += obj[prop];\r\n        xml += \"</\" + prop + \">\";\r\n    }\r\n    xml = xml.replace(/<\\/?[0-9]{1,}>/g, '');\r\n    xml = xml + \"</\" + rootTag + \">\"\r\n    return xml\r\n}\r\nfunction OBJtoXMLnoRoot(obj) {\r\n    var xml = '';\r\n    for (var prop in obj) {\r\n        xml += \"<\" + prop + \">\";\r\n        xml += obj[prop];\r\n        xml += \"</\" + prop + \">\";\r\n    }\r\n    xml = xml.replace(/<\\/?[0-9]{1,}>/g, '');\r\n    return xml\r\n}\r\n\r\nexport function StringToXML(oString) {\r\n    //code for IE\r\n    if (window.ActiveXObject) {\r\n        var oXML = new window.ActiveXObject(\"Microsoft.XMLDOM\"); oXML.loadXML(oString);\r\n        return oXML;\r\n    }\r\n    // code for Chrome, Safari, Firefox, Opera, etc. \r\n    else {\r\n        return (new DOMParser()).parseFromString(oString, \"text/xml\");\r\n    }\r\n}\r\n\r\nexport function XMLToString(oXML) {\r\n    //code for IE\r\n    if (window.ActiveXObject) {\r\n        var oString = oXML.xml; return oString;\r\n    }\r\n    // code for Chrome, Safari, Firefox, Opera, etc.\r\n    else {\r\n        return (new XMLSerializer()).serializeToString(oXML);\r\n    }\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport { generateVoucherXml } from './voucherGenerator';\n\nimport * as filesaver from \"file-saver\";\n\nconst Results = (props) => (\n  <div id=\"results\" className=\"results\" style={{ display: props.show ? \"block\" : \"none\" }}>\n    <div className=\"header\">\n      <button onClick={() => props.toggle()} className=\"btn btn-sm btn-danger\">close</button>\n    </div>\n    <div className=\"body\">{props.value}</div>\n  </div>\n)\n\nclass App extends Component {\n  state = {\n    csvString: \"\",\n    xml: \"\",\n    dataList: [],\n    selectedFile: \"\",\n    showResult: false\n  }\n  openFile() {\n    this.refs.fileSelector.click()\n  }\n  readInputFile(event) {\n    let self = this;\n    let fileReader = new FileReader();\n    let filename = event.target.files[0].name\n    fileReader.readAsText(event.target.files[0], \"UTF-8\");\n    fileReader.onload = () => {\n      let data = fileReader.result.trim()\n      self.setState({ csvString: data });\n    }\n    this.setState({ selectedFile: filename })\n  }\n\n  processCSV() {\n    let content = this.state.csvString.split(\"\\n\")\n    let data = []\n    console.debug(content);\n    if (Array.isArray(content)) {\n      for (let i = 1; i < content.length; i++) {\n        console.debug(content[i]);\n        let infor = content[i].split(\",\")\n        if (Array.isArray(infor)) {\n          let csvData = {\n            date: infor[0],\n            vtype: infor[1],\n            refNo: i,\n            drLed: infor[3],\n            crLed: infor[4],\n            drAmt: infor[5],\n            crAmt: infor[6],\n            amt: infor[5] + infor[6],\n            narration: infor[7]\n          }\n          data.push(csvData);\n        }\n      }\n      this.setState({\n        dataList: data\n      })\n    } else {\n      alert(\"invalid data\")\n    }\n  }\n\n  generateXML() {\n    let csv = this.state.dataList;\n    let entries = \"<ENVELOPE><HEADER><TALLYREQUEST>Import Data</TALLYREQUEST></HEADER><BODY><IMPORTDATA><REQUESTDESC><REPORTNAME>Vouchers</REPORTNAME><STATICVARIABLES><SVCURRENTCOMPANY></SVCURRENTCOMPANY></STATICVARIABLES></REQUESTDESC><REQUESTDATA>\"\n    csv.forEach((x, i) => {\n      let y = generateVoucherXml(x, i)\n      entries += y\n    })\n    entries += \"</REQUESTDATA></IMPORTDATA></BODY></ENVELOPE>\"\n\n    this.setState({ xml: entries })\n    let data = new Blob([entries], { type: \"application/xml;charset=utf-8\"});\n    filesaver.saveAs(data, 'VoucherExport_' + new Date().getTime() + \".xml\");\n\n  }\n\n  OBJtoXML(obj, rootTag) {\n    var xml = '<' + rootTag + '>';\n    for (var prop in obj) {\n      xml += \"<\" + prop + \">\";\n      xml += obj[prop];\n      xml += \"</\" + prop + \">\";\n    }\n    xml = xml.replace(/<\\/?[0-9]{1,}>/g, '');\n    xml = xml + \"</\" + rootTag + \">\"\n    return xml\n  }\n  toggleResult() {\n    let current = this.state.showResult\n    this.setState({\n      showResult: !current\n    })\n  }\n  handelDrRowChange(e, index) {\n    let rowValue = e.target.value\n    let newDataList = this.state.dataList\n    newDataList[index]['drLed'] = rowValue;\n    this.setState({ dataList: newDataList });\n  }\n  handelCrRowChange(e, index) {\n    let rowValue = e.target.value\n    let newDataList = this.state.dataList\n    newDataList[index]['crLed'] = rowValue;\n    this.setState({ dataList: newDataList });\n  }\n  handelvTypeRowChange(e, index) {\n    let rowValue = e.target.value\n    let newDataList = this.state.dataList\n    newDataList[index]['vtype'] = rowValue;\n    this.setState({ dataList: newDataList });\n  }\n  render() {\n\n    let tdata = this.state.dataList.map((data, index) => {\n      return (\n        <tr key={index}>\n          <td>{data.date}</td>\n          <td>\n            <input type=\"text\" key={index} value={data.vtype} onChange={(e) => this.handelvTypeRowChange(e, index)}/>\n          </td>\n          <td>{data.refNo}</td>\n          <td>\n            <input type=\"text\" key={index} value={data.drLed} onChange={(e) => this.handelDrRowChange(e, index)}/>\n          </td>\n          <td>\n            <input type=\"text\" key={index} value={data.crLed} onChange={(e) => this.handelCrRowChange(e, index)}/>\n          </td>\n          <td>{data.drAmt}</td>\n          <td>{data.crAmt}</td>\n          <td>{data.amt}</td>\n          <td>{data.narration}</td>\n        </tr>\n      )\n    })\n\n    return (\n      <div>\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n          <a className=\"navbar-brand\" href>Voucher to tally XML </a>\n          <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarColor03\" aria-controls=\"navbarColor03\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n\n          <div className=\"collapse navbar-collapse\" id=\"navbarColor03\">\n            <ul className=\"navbar-nav mr-auto\">\n            </ul>\n          </div>\n        </nav>\n        <div className=\"container-fluid\">\n          <input type=\"file\" id=\"chooseFile\" ref=\"fileSelector\"\n            onChange={this.readInputFile.bind(this)} onClick={(event) => { event.target.value = null }} style={{ display: \"none\" }} />\n          <div className=\"bg-info pl-2 pr-2 pb-1 pt-1 text-dark\">\n            Selected file :\n            <button onClick={() => this.openFile()} type=\"button\" className=\"btn btn-sm btn-primary\">Open File</button> : {this.state.selectedFile}\n            &nbsp;<button onClick={() => this.processCSV()} type=\"button\" className=\"btn btn-sm btn-success\">Process CSV</button>\n            <button type=\"button\" className=\"btn btn-sm btn-warning float-right\" onClick={() => this.generateXML()}>Generate XML</button>\n          </div>\n          <table className=\"table table-hover\">\n            <thead>\n              <tr>\n                <th>Date</th>\n                <th>Voucher Type</th>\n                <th>Ref Number</th>\n                <th>Dr Ledger</th>\n                <th>Cr Ledger</th>\n                <th>Dr Amount</th>\n                <th>Cr Amounr</th>\n                <th>Amount</th>\n                <th>narration</th>\n              </tr>\n            </thead>\n            <tbody>\n              {tdata}\n            </tbody>\n          </table>\n          <hr />\n          <Results value={this.state.xml} show={this.state.showResult} toggle={() => this.toggleResult()} />\n        </div>\n      </div>\n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}