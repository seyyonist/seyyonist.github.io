{"version":3,"sources":["voucherGenerator.js","App.js","serviceWorker.js","index.js"],"names":["OBJtoXML","obj","rootTag","xml","prop","replace","OBJtoXMLnoRoot","App","state","csvString","dataList","selectedFile","this","refs","fileSelector","click","event","self","fileReader","FileReader","filename","target","files","name","readAsText","onload","data","result","trim","setState","content","split","console","debug","Array","isArray","i","length","infor","csvData","date","vtype","refNo","drLed","crLed","amt","narration","push","alert","csv","entries","forEach","x","y","csvRow","companyId","uuid","uuidv4","cdtrData","REMOVEZEROENTRIES","ISDEEMEDPOSITIVE","LEDGERNAME","AMOUNT","dbtrData","otherDate","VOUCHERTYPENAME","DATE","EFFECTIVEDATE","REFERENCE","NARRATION","GUID","ALTERID","otherDateXml","cdtrDataXml","dbtrDataXml","voucher","generateVoucherXml","tdata","map","index","key","type","id","ref","onChange","readInputFile","bind","onClick","value","style","display","openFile","processCSV","generateXML","readOnly","rows","cols","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9d548682.chunk.js","sourcesContent":["import { v4 as uuidv4 } from 'uuid';\r\nexport function generateVoucherXml(csvRow, companyId = 123234) {\r\n    /** date:infor[0],\r\n        vtype:infor[1],\r\n        refNo:infor[2],\r\n        drLed:infor[3],\r\n        crLed:infor[4],\r\n        amt:infor[5],\r\n        narration:infor[6]\r\n     */\r\n   \r\n    let uuid = uuidv4();\r\n    let cdtrData = {\r\n        REMOVEZEROENTRIES: \"No\",\r\n        ISDEEMEDPOSITIVE: \"No\",\r\n        LEDGERNAME: csvRow.crLed,\r\n        AMOUNT: csvRow.amt\r\n    }\r\n    let dbtrData = {\r\n        REMOVEZEROENTRIES: \"No\",\r\n        ISDEEMEDPOSITIVE: \"Yes\",\r\n        LEDGERNAME: csvRow.drLed,\r\n        AMOUNT: -csvRow.amt\r\n    }\r\n    let otherDate = {\r\n        VOUCHERTYPENAME: csvRow.vtype,\r\n        DATE: csvRow.date,\r\n        EFFECTIVEDATE: csvRow.date,\r\n        REFERENCE: csvRow.refNo,\r\n        NARRATION: csvRow.narration,\r\n        GUID: uuid,\r\n        ALTERID: companyId\r\n    }\r\n    let otherDateXml = OBJtoXMLnoRoot(otherDate)\r\n    let cdtrDataXml = OBJtoXML(cdtrData, \"ALLLEDGERENTRIES.LIST\")\r\n    let dbtrDataXml = OBJtoXML(dbtrData, \"ALLLEDGERENTRIES.LIST\")\r\n    let voucher = '<VOUCHER REMOTEID=\"' + uuid + '\" VCHTYPE=\"' + csvRow.vtype + '\" ACTION=\"Create\">'\r\n    let xml = '<TALLYMESSAGE xmlns:UDF=\"TallyUDF\">' + voucher + otherDateXml + cdtrDataXml + dbtrDataXml + \"</VOUCHER></TALLYMESSAGE>\"\r\n    return xml\r\n}\r\n\r\nfunction OBJtoXML(obj, rootTag) {\r\n    var xml = '<' + rootTag + '>';\r\n    for (var prop in obj) {\r\n        xml += \"<\" + prop + \">\";\r\n        xml += obj[prop];\r\n        xml += \"</\" + prop + \">\";\r\n    }\r\n    xml = xml.replace(/<\\/?[0-9]{1,}>/g, '');\r\n    xml = xml + \"</\" + rootTag + \">\"\r\n    return xml\r\n}\r\nfunction OBJtoXMLnoRoot(obj) {\r\n    var xml = '';\r\n    for (var prop in obj) {\r\n        xml += \"<\" + prop + \">\";\r\n        xml += obj[prop];\r\n        xml += \"</\" + prop + \">\";\r\n    }\r\n    xml = xml.replace(/<\\/?[0-9]{1,}>/g, '');\r\n    return xml\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport {generateVoucherXml} from './voucherGenerator';\n\nclass App extends Component{\n  state={\n    csvString:\"\",\n    xml:\"\",\n    dataList:[],\n    selectedFile:\"\"\n  }\n  openFile(){\n    this.refs.fileSelector.click()\n  }\n  readInputFile(event) {\n    let self = this;\n    let fileReader = new FileReader();\n    let filename=event.target.files[0].name\n    fileReader.readAsText(event.target.files[0], \"UTF-8\");\n    fileReader.onload = () => {\n      let data = fileReader.result.trim()\n      self.setState({ csvString: data });\n    }\n    this.setState({selectedFile:filename})\n  }\n\n  processCSV(){\n    let content=this.state.csvString.split(\"\\n\")\n    let data=[]\n    console.debug(content);\n    if(Array.isArray(content)){\n      for(let i=1;i<content.length;i++){\n        console.debug(content[i]);\n        let infor=content[i].split(\",\")\n        if(Array.isArray(infor)){\n            let csvData={\n              date:infor[0],\n              vtype:infor[1],\n              refNo:infor[2],\n              drLed:infor[3],\n              crLed:infor[4],\n              amt:infor[5],\n              narration:infor[6]\n            }\n            data.push(csvData);\n        }\n      }\n      this.setState({\n        dataList:data\n      })\n    }else{\n      alert(\"invalid data\")\n    }\n  }\n\n  generateXML(){\n    let csv=this.state.dataList;\n    let entries = \"<ENVELOPE><HEADER><TALLYREQUEST>Import Data</TALLYREQUEST></HEADER><BODY><IMPORTDATA><REQUESTDESC><REPORTNAME>Vouchers</REPORTNAME><STATICVARIABLES><SVCURRENTCOMPANY></SVCURRENTCOMPANY></STATICVARIABLES></REQUESTDESC><REQUESTDATA>\"\n    csv.forEach((x,i)=>{\n      let y=generateVoucherXml(x,i)\n      entries+=y\n    })\n    entries+=\"</REQUESTDATA></IMPORTDATA></BODY></ENVELOPE>\"\n    this.setState({xml:entries})\n  }\n\n  OBJtoXML(obj,rootTag) {\n    var xml = '<'+rootTag+'>';\n    for (var prop in obj) {\n      xml += \"<\" + prop + \">\";\n      xml += obj[prop];\n      xml += \"</\" + prop + \">\";\n    }\n    xml = xml.replace(/<\\/?[0-9]{1,}>/g, '');\n    xml=xml+\"</\"+rootTag+\">\"\n    return xml\n  }\n\n  render(){\n    let tdata=this.state.dataList.map((data,index)=>{\n      return(\n        <tr key={index}>\n          <td>{data.date}</td>\n          <td>{data.vtype}</td>\n          <td>{data.refNo}</td>\n          <td>{data.drLed}</td>\n          <td>{data.crLed}</td>\n          <td>{data.amt}</td>\n          <td>{data.narration}</td>\n        </tr>\n      )\n    })\n    return(\n     <div>\n        <input type=\"file\" id=\"chooseFile\"  ref=\"fileSelector\"\n          onChange={this.readInputFile.bind(this)} onClick={(event) => { event.target.value = null }} style={{ display: \"none\" }} />\n          <button onClick={()=>this.openFile()}>Open File</button>\n          <button onClick={()=>this.processCSV()}>Process CSV</button>\n          <button onClick={()=>this.generateXML()}>Generate XML</button>\n       <hr/>\n    <div>Selected file : {this.state.selectedFile}</div>\n        <table>\n          <thead>\n            <tr>\n              <th>Date</th>\n              <th>Voucher Type</th>\n              <th>Ref Number</th>\n              <th>Dr Ledger</th>\n              <th>Cr Ledger</th>\n              <th>Amount</th>\n              <th>narration</th>\n            </tr>\n          </thead>\n          <tbody>\n              {tdata}\n          </tbody>\n        </table>\n        <hr/>\n        <div>\n          <textarea readOnly value={this.state.xml} rows=\"15\" cols=\"150\">\n\n          </textarea>\n          \n        </div>\n     </div>\n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}